<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label4.Text" xml:space="preserve">
    <value>Form có 2 chức năng tìm kiếm bao gồm tìm theo
các thông tin cơ bản tương ứng với nút thông tin,
tìm theo các mốc thời gian tương ứng với nút thời
gian. Để bắt đầu quá trình tìm kiếm vui lòng chọn 1
trong 2 nút trên.</value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>Sau khi click 1 trong 2 nút Thông tin hoặc Thời gian.
Ở đây ví dụ là nút Thông tin. Ta thấy trạng thái của 
phần thông tin bài thi đã được mở như (hình đầu tiên
bên phải). Và thanh điều khiển cũng thay đổi (hình 
thứ 2 bên phải).</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>Bước tiếp theo, tuy phần thông 
tin bài thi đã mở nhưng chúng 
ta vẫn chưa thể điền thông tin 
để tìm kiểm. Để có thể nhập thông 
tin ta ấn vào label hay nhãn trước 
cột chúng ta cần lọc thông tin, ở đây 
mình chọn Mã môn và Lân thi để lọc.
Sau đó điền giá trị vào trường cần
lọc.</value>
  </data>
  <data name="label10.Text" xml:space="preserve">
    <value>Click nút tìm kiểm để bắt đầu tìm kiếm.
Kết quả sẽ được hiện thị trên bảng gird
 (hình đầu tiên bên phải) và đồng thời
thanh tìm kiếm cũng về trạng thái ban
đầu. Sau bước này nếu muốn tiếp tục
lọc bạn thực hiện lại các bước đã nêu
trong phần "Cách sử dụng". Đối với nút
Thời gian cách sử dụng tương tự với
nút thông tin.
</value>
  </data>
  <data name="label12.Text" xml:space="preserve">
    <value>Phần đầu của phần hướng dẫn này sẽ cung cấp cho bạn sơ lược các chức năng của các nút trong Form tìm kiếm bài thi.
Nút tìm kiếm: tiến hành tìm kiếm theo các giá trị đã chọn và trả về kết quả.
Nút thông tin: Cho phép người dùng tìm theo thông tin (chi tiết sẽ giải thích ở phần sau).
Nút thời gian: Cho phép người dùng tìm theo các mốc thời gian tương tự nút thông tin.
Nút Clear: Nếu dữ liệu nhập lỗi hoặc sai, bạn có thể sử dụng nút này để xóa toàn bộ dữ liệu đã nhập.
Nút không tìm: Hủy tìm kiếm và phục hồi dữ liệu ban đầu.
Nút Phục hồi DL: Phục hồi dữ liệu ban đầu.
Nút đóng: Đóng form.</value>
  </data>
</root>